-- Plugins
local dap = require("dap")
local telescope = require("telescope")
local comment = require("Comment.api")
local oil = require("oil")
local telescope_builtin = require("telescope.builtin")
local smart_splits = require("smart-splits")
local harpoon = require("harpoon")

local toggle_oil = function()
	pcall(vim.cmd.write)
	oil.toggle_float()
end

vim.keymap.set("n", "<leader>a", function()
	harpoon:list():add()
end)
vim.keymap.set("n", "<leader>A", function()
	harpoon.ui:toggle_quick_menu(harpoon:list())
end)

vim.keymap.set("n", "<leader>1", function()
	harpoon:list():select(1)
end)
vim.keymap.set("n", "<leader>2", function()
	harpoon:list():select(2)
end)
vim.keymap.set("n", "<leader>3", function()
	harpoon:list():select(3)
end)
vim.keymap.set("n", "<leader>4", function()
	harpoon:list():select(4)
end)

-- Toggle previous & next buffers stored within Harpoon list
vim.keymap.set("n", "<C-S-P>", function()
	harpoon:list():prev()
end)
vim.keymap.set("n", "<C-S-N>", function()
	harpoon:list():next()
end)

vim.keymap.set({ "n", "v", "x" }, "<leader>pp", PatchClipboard, { desc = "Patch clipboard content" })
vim.keymap.set(
	{ "n", "v", "x" },
	"<leader>pl",
	LoadAssistantClipboard,
	{ desc = "Load context and current file to clipboard" }
)
vim.keymap.set({ "n", "v", "x" }, "<leader>pc", AddAssistantContext, { desc = "Add to context files" })
vim.keymap.set({ "n", "v", "x" }, "<leader>pd", DeleteAssistantContext, { desc = "Remove from context files" })
vim.keymap.set({ "n", "v", "x" }, "<leader>pa", ":diffput<CR>", { desc = "Accept edit" })
vim.keymap.set({ "n", "v", "x" }, "<leader>pr", ":diffget<CR>", { desc = "Refuse edit" })
vim.keymap.set({ "n", "v", "x" }, "<leader>pn", "]c", { desc = "Go to next edit" })
vim.keymap.set({ "n", "v", "x" }, "<leader>pN", "[c", { desc = "Go to previous edit" })

vim.keymap.set("n", "gd", telescope_builtin.lsp_definitions, { desc = "Go to definition" })
vim.keymap.set("n", "gD", vim.lsp.buf.declaration, { desc = "Go to declaration" })
vim.keymap.set("n", "gs", telescope_builtin.lsp_document_symbols, { desc = "List document symbols" })
vim.keymap.set("n", "gS", telescope_builtin.lsp_dynamic_workspace_symbols, { desc = "List workspace symbols" })
vim.keymap.set("n", "gi", telescope_builtin.lsp_implementations, { desc = "Go to implementation" })
vim.keymap.set("n", "gr", telescope_builtin.lsp_references, { desc = "Find references" })
vim.keymap.set("n", "<C-a>", vim.lsp.buf.code_action, { desc = "Code actions" })
vim.keymap.set("n", "<leader>h", vim.lsp.buf.signature_help, { desc = "Show signature help" })
vim.keymap.set("n", "<leader>D", vim.diagnostic.open_float, { desc = "Show diagnostics in floating window" })
vim.keymap.set("n", "K", vim.lsp.buf.hover, { desc = "Show hover information" })
vim.keymap.set("n", "<C-h>", smart_splits.move_cursor_left, { desc = "Move cursor left" })
vim.keymap.set("n", "<C-j>", smart_splits.move_cursor_down, { desc = "Move cursor down" })
vim.keymap.set("n", "<C-k>", smart_splits.move_cursor_up, { desc = "Move cursor up" })
vim.keymap.set("n", "<C-l>", smart_splits.move_cursor_right, { desc = "Move cursor right" })
vim.keymap.set("n", "<C-\\>", smart_splits.move_cursor_previous, { desc = "Move to previous split" })
vim.keymap.set("n", "<M-h>", smart_splits.resize_left, { desc = "Resize split left" })
vim.keymap.set("n", "<M-j>", smart_splits.resize_down, { desc = "Resize split down" })
vim.keymap.set("n", "<M-k>", smart_splits.resize_up, { desc = "Resize split up" })
vim.keymap.set("n", "<M-l>", smart_splits.resize_right, { desc = "Resize split right" })
vim.keymap.set("n", "<M-H>", smart_splits.swap_buf_left, { desc = "Swap buffer left" })
vim.keymap.set("n", "<M-J>", smart_splits.swap_buf_down, { desc = "Swap buffer down" })
vim.keymap.set("n", "<M-K>", smart_splits.swap_buf_up, { desc = "Swap buffer up" })
vim.keymap.set("n", "<M-L>", smart_splits.swap_buf_right, { desc = "Swap buffer right" })
vim.keymap.set("n", "<M-r>", vim.lsp.buf.rename, { desc = "Rename symbol" })
vim.keymap.set("n", "<M-e>b", ":Refactor extract_block<cr>", { desc = "Extract block" })
vim.keymap.set("n", "<M-e>", ":Refactor extract_block_to_file<cr>", { desc = "Extract block to file" })
vim.keymap.set("n", "<M-i>f", ":Refactor inline_func<cr>", { desc = "Inline function" })
vim.keymap.set("n", "<leader>F", telescope_builtin.find_files, { desc = "Find files" })
vim.keymap.set("n", "<leader>G", telescope_builtin.live_grep, { desc = "Live grep" })
vim.keymap.set("n", "<leader>D", telescope_builtin.diagnostics, { desc = "Show diagnostics" })
vim.keymap.set("n", "<leader>B", telescope_builtin.buffers, { desc = "List buffers" })
vim.keymap.set("n", "<leader>H", telescope_builtin.help_tags, { desc = "Find help tags" })
vim.keymap.set("n", "<leader>ds", dap.continue, { desc = "Start/Continue debugging" })
vim.keymap.set("n", "<leader>dl", dap.run_last, { desc = "Run last debug session" })
vim.keymap.set("n", "<leader>dv", dap.step_over, { desc = "Step over" })
vim.keymap.set("n", "<leader>di", dap.step_into, { desc = "Step into" })
vim.keymap.set("n", "<leader>do", dap.step_out, { desc = "Step out" })
vim.keymap.set("n", "<leader>db", dap.toggle_breakpoint, { desc = "Toggle breakpoint" })
vim.keymap.set("n", "<leader>dc", dap.clear_breakpoints, { desc = "Clear breakpoints" })
vim.keymap.set("n", "<leader>dr", dap.repl.open, { desc = "Open DAP REPL" })
vim.keymap.set("n", "<leader>tn", ":TestNearest<cr>", { desc = "Run nearest test" })
vim.keymap.set("n", "<leader>tf", ":TestFile<cr>", { desc = "Run tests in file" })
vim.keymap.set("n", "<leader>ts", ":TestSuite<cr>", { desc = "Run test suite" })
vim.keymap.set("n", "<leader>tl", ":TestLast<cr>", { desc = "Run last test" })
vim.keymap.set("n", "<leader>tg", ":TestVisit<cr>", { desc = "Visit last test" })
vim.keymap.set("n", "<leader>ga", ":Git add %<CR>", { desc = "Stage current file" })
vim.keymap.set("n", "<leader>gc", ":Git commit<CR>", { desc = "Commit current staged files" })
vim.keymap.set("n", "<leader>f", toggle_oil, { desc = "Toggle file explorer (oil)" })
vim.keymap.set("n", "<C-c>", comment.toggle.linewise.current)
vim.keymap.set("x", "<C-c>", function()
	vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<ESC>", true, false, true), "nx", false)
	comment.toggle.linewise(vim.fn.visualmode())
end)
vim.keymap.set("x", "<A-e>v", ":Refactor extract_var<cr>")
vim.keymap.set("x", "<A-e>f", ":Refactor extract_to_file<cr>")
vim.keymap.set({ "n", "x" }, "<A-i>v", ":Refactor inline_var<cr>dd")
vim.keymap.set({ "n", "x" }, "<A-a>", telescope.extensions.refactoring.refactors)
